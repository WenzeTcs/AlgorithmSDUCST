#pragma GCC optimize(2)
#include<bits/stdc++.h>
using namespace std;

#define ll __int128
//map<ll,ll> f;
const ll p=211108170305887;
ll a, b;
void exgcd(ll a,ll b,ll &x,ll &y) {
    if(b==0) {x=1;y=0;}
    else {
		exgcd(b,a%b,y,x);      
        y -= (a/b)*x;        
    }
}
ll inv1(ll a) {
	ll x, y;
	exgcd(a,p,x,y);
	while(x<0) x+=p;
	x%=p;
	return x;
}

#define rep(i,s,t) for(int i=s; i<=t; ++i)

ll qp(ll a, ll x) {
	ll res = 1;
	while(x) {
		if(x&1) res = res*a%p;
		a = a*a%p;
		x >>= 1;
	//	cout << x <<endl;
	}
//	cout <<res<<endl;
	return res;
}
ll inv(ll a) {
	return qp(a, p-2);
}
#define ECPoint pair<ll,ll>
#define xx first
#define yy second

#define x1 A.xx
#define y1 A.yy
#define x2 B.xx
#define y2 B.yy
#define x3 C.xx
#define y3 C.yy
ECPoint add(ECPoint A, ECPoint B) {
	ECPoint C;
	if(x1 == x2 && y1 ==y2) {
		ll k = (3*x1*x1%p + a)*inv(2*y1)%p;
		x3= (k*k%p-2*x1+p+p)%p;
		y3 = (k*((x1-x3+p)%p)%p-y1+p)%p;
	} else {
		ll k = (y2-y1+p)%p * inv((x2-x1+p)%p) %p;
		x3 = (k*k%p - x1 - x2+p+p)%p;
		y3 = (k*((x1-x3+p)%p)%p-y1+p)%p;
	}
	return C;
}
ECPoint dot(ECPoint A, ll k) {
	ECPoint B=A, C=A;
	k--;
	while(k) {
		if(k&1) {
			C = add(B, C);
		} 
		B = add(B,B);
		k>>=1;
	}
	return C;
}
map <ECPoint, ll> f;
void print(__int128 x)
{
    if(x<0)
    {
        putchar('-');
        x=-x;
    }
    if(x>9)print(x/10);
    putchar(x%10+'0');
}
int main()
{
	ECPoint P, R;
	P={47815642535808, 116240163507508};
    R={77983503452527, 143728424564583};
//	scanf("%d %d %d", &p, &b, &n);
	ll m = sqrt(p)*10;
	ll t = (p-1)/m + 1;
	ECPoint Q = dot(P,t);
	Q.yy = p - Q.yy;
	ECPoint PP = P;
	rep(j,1,t) {
		//cout << j<<' '<<t << endl;
/*		if(j%(t/10000) == 0) {
			cout <<"j="<<j<<endl;
			print(PP.xx);cout <<endl;
			print(PP.yy);cout <<endl;
		}*/
		f[PP] = j;
		PP = add(PP, P);
	}
//	printf("%d",f.size());
//	cout << t<<endl;
	ll t0 = t;
//	cout << "m="<<m<<endl;
	ECPoint QQ = R;
	int cnt=0;
	rep(i,0,m) {
	//	cout << i <<' '<<t<<' '<< f.count(t) << endl;
	//	if(i%(m/100)==0) cout <<++cnt<<"% of the search is done"<<endl;
	//	printf("%d\n",i);
		if(f.count(QQ)) {
		//	print(f[QQ]);
			print(((i*t + f[QQ])%p+p)%p);
			return 0;
		}
		QQ = add(QQ,Q);
	} 
	cout << "no solution"<<endl;
	return 0;
}
